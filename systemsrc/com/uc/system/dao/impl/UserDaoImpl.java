/** * *************************************************** * Copyright (C), NingBo ZhiWeiReach info. Co., Ltd. * ***************************************************** *  * */package com.uc.system.dao.impl;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.ArrayList;import java.util.List;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.data.mongodb.core.query.Update;import org.springframework.stereotype.Component;import com.mongodb.WriteConcern;import com.mongodb.WriteResult;import com.uc.system.dao.UserDao;import com.uc.system.exception.ZhiWeiException;import com.uc.system.model.User;import com.uc.system.util.MD5Util;import com.uc.system.util.TimeUtil;@Componentpublic class UserDaoImpl extends GeneralDaoImpl implements UserDao {	@Override	public User insert(User ob) throws ZhiWeiException {		try {			ob.setId(Sequence.getNextId("user"));			ob.setCreateTime(TimeUtil.getCurrentTimeStr());			ob.setPassword(MD5Util.getMd5(ob.getPassword()));			mongoTemp.save(ob);		} catch (Exception e) {			ob = null;			System.out.println("保存用户失败");		}		return ob;	}	@Override	public User findOne(String id) throws ZhiWeiException {		User user = mongoTemp.findOne(new Query(Criteria.where("_id").is(id)),				User.class);		return user;	}	@Override	public User findOne(User ob) throws ZhiWeiException {		Query query = new Query();		if (null != ob.getName() && !"".equals(ob.getName())) {			query.addCriteria(Criteria.where("name").is(ob.getName()));		}		if (null != ob.getPassword() && !"".equals(ob.getPassword())) {			query.addCriteria(Criteria.where("password").is(ob.getPassword()));		}		User user = mongoTemp.findOne(query, User.class);		return user;	}	@Override	public List<User> findAll() throws ZhiWeiException {		List<User> list = mongoTemp.findAll(User.class);		return list;	}	@Override	public long findCont() throws ZhiWeiException {		return 0;	}	@Override	public boolean removeOneById(String id) throws ZhiWeiException {		mongoTemp.setWriteConcern(WriteConcern.SAFE);		WriteResult result = mongoTemp.remove(new Query(Criteria.where("_id")				.is(id)), User.class);		if (result.getN() > 0) {			log.info("删除id:{}", result.getUpsertedId());			return true;		}		mongoTemp.setWriteConcern(WriteConcern.NORMAL);		return false;	}	@Override	public boolean removeAll() throws ZhiWeiException {		return false;	}	@Override	public boolean findAndModify(User ob) throws ZhiWeiException {		try {			ob.setPassword(MD5Util.getMd5(ob.getPassword()));			insert(ob);			return true;		} catch (Exception e) {			e.printStackTrace();		}		return false;	}	@Override	public List<User> findListWithLimitAndSkip(int skip, int limit)			throws ZhiWeiException {		List<User> list = new ArrayList<User>();		Query query = new Query();		query.skip(skip);		query.limit(limit);		list = mongoTemp.find(query, User.class);		return list;	}	@Override	public User UpDateUser(User ob) throws ZhiWeiException {		// TODO Auto-generated method stub		Update update = getUpdate(ob);		mongoTemp.updateFirst(new Query(Criteria.where("_id").is(ob.getId())),				update, User.class);		return null;	}	private Update getUpdate(User ob) {		Update update = new Update();		Method[] methods = ob.getClass().getMethods();		for (Method m : methods) {			if (m.getName().contains("get")) {				try {					update.addToSet(m.getName().replaceAll("get", "")							.toLowerCase(), m.invoke(ob, null));				} catch (IllegalArgumentException e) {					e.printStackTrace();				} catch (IllegalAccessException e) {					e.printStackTrace();				} catch (InvocationTargetException e) {					e.printStackTrace();				}			}		}		return null;	}}