/** * *************************************************** * Copyright (C), NingBo ZhiWeiReach info. Co., Ltd. * ***************************************************** *  * */package com.uc.system.dao.impl;import java.util.List;import javax.annotation.Resource;import org.springframework.data.domain.Sort;import org.springframework.data.domain.Sort.Direction;import org.springframework.data.mongodb.core.MongoTemplate;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.data.mongodb.core.query.TextCriteria;import org.springframework.data.mongodb.core.query.Update;import org.springframework.stereotype.Component;import com.uc.system.dao.PolicyInfoDao;import com.uc.system.exception.ZhiWeiException;import com.uc.system.model.Page;import com.uc.system.model.PolicyInfo;/** * @Description: 政策信息Dao * @ClassName: PolicyInfoDaoImpl * @author 落花流水 * @date 2016年4月27日 上午7:25:21 */@Componentpublic class PolicyInfoDaoImpl implements PolicyInfoDao {	@Resource	private MongoTemplate mongoTemp;	@Override	public PolicyInfo insert(PolicyInfo ob) throws ZhiWeiException {		mongoTemp.save(ob);		return ob;	}	@Override	public PolicyInfo findOne(String id) throws ZhiWeiException {		PolicyInfo info = mongoTemp.findOne(				new Query(Criteria.where("_id").is(id)), PolicyInfo.class);		return info;	}	@Override	public boolean removeOneById(String id) throws ZhiWeiException {		mongoTemp.remove(new Query(Criteria.where("_id").is(id)),				PolicyInfo.class);		return false;	}	@Override	public boolean findAndModify(PolicyInfo ob) throws ZhiWeiException {		try {			mongoTemp.save(ob);			return true;		} catch (Exception e) {			throw new ZhiWeiException(e.getMessage());		}	}	@Override	public void modifyTop(String id, int toState) {		Query query = new Query(Criteria.where("_id").is(id));		Update update = new Update();		update.set("topState", toState);		mongoTemp.findAndModify(query, update, PolicyInfo.class);	}	@Override	public List<PolicyInfo> findAll(com.uc.system.model.Query query, Page page) {		// TODO:关键词查找可以用Solr		Query query1 = new Query();		// query.addCriteria(Criteria.where("").is(query.get))		List<PolicyInfo> list = mongoTemp.find(query1, PolicyInfo.class);		return list;	}	@Override	public PolicyInfo findOne(PolicyInfo ob) throws ZhiWeiException {		return null;	}	@Override	public List<PolicyInfo> findAll() throws ZhiWeiException {		return null;	}	@Override	public long findCont() throws ZhiWeiException {		return 0;	}	@Override	public boolean removeAll() throws ZhiWeiException {		return false;	}	@Override	public List<PolicyInfo> findAllByTITLE() {		Query query = new Query();		query.addCriteria(TextCriteria.forDefaultLanguage().matching("政策"));		List<PolicyInfo> list = mongoTemp.find(query, PolicyInfo.class);		return list;	}	@Override	public List<PolicyInfo> findAllByIds(List<String> ids) {		return null;	}	@Override	public List<PolicyInfo> findByType(int type, Page page) {		if (page == null) {			page = new Page();			page.setPageNum(1);			page.setPageSize(10);		}		int skip = (page.getPageNum() - 1) * page.getPageSize();		Query query = new Query(Criteria.where("policyType").is(type));		query.limit(page.getPageSize());		query.skip(skip);		query.with(new Sort(Direction.DESC, "releaseTime"));		query.getSortObject().put("releaseTime", -1);		List<PolicyInfo> list = mongoTemp.find(query, PolicyInfo.class);		return list;	}	@Override	public List<PolicyInfo> findTop(int top) {		Query query = new Query();// Criteria.where("topState").is(1)		query.with(new Sort(Direction.DESC, "releaseTime"));		query.limit(top);		List<PolicyInfo> list = mongoTemp.find(query, PolicyInfo.class);		return list;	}}