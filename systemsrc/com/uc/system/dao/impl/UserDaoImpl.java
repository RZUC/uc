/** * *************************************************** * Copyright (C), NingBo ZhiWeiReach info. Co., Ltd. * ***************************************************** *  * */package com.uc.system.dao.impl;import java.util.ArrayList;import java.util.List;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.data.mongodb.core.query.Update;import org.springframework.stereotype.Component;import com.mongodb.WriteConcern;import com.mongodb.WriteResult;import com.uc.system.dao.UserDao;import com.uc.system.exception.ZhiWeiException;import com.uc.system.model.PolicyType;import com.uc.system.model.User;@Componentpublic class UserDaoImpl extends GeneralDaoImpl implements UserDao {	@Override	public User insert(User ob) throws ZhiWeiException {		try {			mongoTemp.save(ob);		} catch (Exception e) {			ob = null;			System.out.println("保存用户失败");		}		return ob;	}	@Override	public User findOne(String id) throws ZhiWeiException {		User user = mongoTemp.findOne(new Query(Criteria.where("name").is(id)),				User.class);		return user;	}	@Override	public User findOne(User ob) throws ZhiWeiException {		return null;	}	@Override	public List<User> findAll() throws ZhiWeiException {		List<User> list = mongoTemp.findAll(User.class);		return list;	}	@Override	public long findCont() throws ZhiWeiException {		return 0;	}	@Override	public boolean removeOneById(String id) throws ZhiWeiException {		return false;	}	@Override	public boolean removeAll() throws ZhiWeiException {		return false;	}	@Override	public boolean findAndModify(User ob) throws ZhiWeiException {		try {			insert(ob);			return true;		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		return false;	}	@Override	public List<User> findListWithLimitAndSkip(int skip, int limit)			throws ZhiWeiException {		List<User> list = new ArrayList<User>();		Query query = new Query();		query.skip(skip);		query.limit(limit);		list = mongoTemp.find(query, User.class);		return list;	}}